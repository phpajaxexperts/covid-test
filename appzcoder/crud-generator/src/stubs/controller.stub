<?php

namespace DummyNamespace;

use DummyRootNamespaceHttp\Requests;
use DummyRootNamespaceHttp\Controllers\Controller;

use {{modelNamespace}}{{modelName}};
use Illuminate\Http\Request;

{{foreign_key_table_init}}

class DummyClass extends Controller
{

    /*
     public function __construct() {
         $this->middleware(['auth', 'clearance']); //clearance middleware lets only users with a //specific permission permission to access these resources
     }
    */


    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\View\View
     */
    public function view(Request $request)
    {
        $keyword = $request->get('search');
        $perPage = {{pagination}};

        if (!empty($keyword)) {
            ${{crudName}} = {{modelName}}::{{whereSnippet}}latest()->paginate($perPage);
        } else {
            ${{crudName}} = {{modelName}}::latest()->paginate($perPage);
        }

        return view('{{viewModulePath}}{{viewName}}.view', compact('{{crudName}}'));
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\View\View
     */
    public function create()
    {
        {{foreign_key_records}}

        return view('{{viewModulePath}}{{viewName}}.create'  {{foreign_key_record_variables}});
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param \Illuminate\Http\Request $request
     *
     * @return \Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector
     */
    public function store(Request $request)
    {
        {{validationRules}}
        $requestData = $request->all();
        {{fileSnippet}}
        {{modelName}}::create($requestData);

        return redirect('{{routeGroup}}view-{{viewUrlName}}')->with('flash_message', '{{modelName}} added!');
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     *
     * @return \Illuminate\View\View
     */
    public function detail(Request $request)
    {
        $id = $request->id;
        ${{crudNameSingular}} = {{modelName}}::findOrFail($id);

        return view('{{viewModulePath}}{{viewName}}.detail', compact('{{crudNameSingular}}'));
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     *
     * @return \Illuminate\View\View
     */
    public function edit(Request $request)
    {
        $id = $request->id;
        ${{crudNameSingular}} = {{modelName}}::findOrFail($id);

        {{foreign_key_records}}

        return view('{{viewModulePath}}{{viewName}}.edit', compact('{{crudNameSingular}}' {{foreign_key_record_variables_edit}}));
    }

    /**
     * Update the specified resource in storage.
     *
     * @param \Illuminate\Http\Request $request
     * @param  int  $id
     *
     * @return \Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector
     */
    public function update(Request $request, $id)
    {
        {{validationRules}}
        $requestData = $request->all();
        {{fileSnippet}}
        ${{crudNameSingular}} = {{modelName}}::findOrFail($id);
        ${{crudNameSingular}}->update($requestData);

        return redirect('{{routeGroup}}view-{{viewUrlName}}')->with('flash_message', '{{modelName}} updated!');
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     *
     * @return \Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector
     */
    public function destroy(Request $request)
    {
        $id = $request->id;
        {{modelName}}::destroy($id);

        return redirect('{{routeGroup}}view-{{viewUrlName}}')->with('flash_message', '{{modelName}} deleted!');
    }
}
